%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.13.0
-module(local_gw_config_client_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type pubkey_res_pb() ::
      #{address                 => iodata()         % = 1
       }.

-type pubkey_req_pb() ::
      #{
       }.

-type sign_req_pb() ::
      #{data                    => iodata()         % = 1
       }.

-type sign_res_pb() ::
      #{signature               => iodata()         % = 1
       }.

-type ecdh_req_pb() ::
      #{address                 => iodata()         % = 1
       }.

-type ecdh_res_pb() ::
      #{secret                  => iodata()         % = 1
       }.

-type config_req_pb() ::
      #{keys                    => [iodata()]       % = 1
       }.

-type config_res_pb() ::
      #{values                  => [config_value_pb()] % = 1
       }.

-type config_value_pb() ::
      #{name                    => iodata(),        % = 1
        type                    => iodata(),        % = 2
        value                   => iodata()         % = 3
       }.

-type keyed_uri_pb() ::
      #{address                 => iodata(),        % = 1
        uri                     => iodata()         % = 2
       }.

-type height_req_pb() ::
      #{
       }.

-type height_res_pb() ::
      #{height                  => non_neg_integer(), % = 1, 64 bits
        block_age               => non_neg_integer(), % = 2, 64 bits
        gateway                 => keyed_uri_pb()   % = 3
       }.

-type region_req_pb() ::
      #{
       }.

-type region_res_pb() ::
      #{region                  => integer()        % = 1, 32 bits
       }.

-export_type(['pubkey_res_pb'/0, 'pubkey_req_pb'/0, 'sign_req_pb'/0, 'sign_res_pb'/0, 'ecdh_req_pb'/0, 'ecdh_res_pb'/0, 'config_req_pb'/0, 'config_res_pb'/0, 'config_value_pb'/0, 'keyed_uri_pb'/0, 'height_req_pb'/0, 'height_res_pb'/0, 'region_req_pb'/0, 'region_res_pb'/0]).

-spec encode_msg(pubkey_res_pb() | pubkey_req_pb() | sign_req_pb() | sign_res_pb() | ecdh_req_pb() | ecdh_res_pb() | config_req_pb() | config_res_pb() | config_value_pb() | keyed_uri_pb() | height_req_pb() | height_res_pb() | region_req_pb() | region_res_pb(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg(pubkey_res_pb() | pubkey_req_pb() | sign_req_pb() | sign_res_pb() | ecdh_req_pb() | ecdh_res_pb() | config_req_pb() | config_res_pb() | config_value_pb() | keyed_uri_pb() | height_req_pb() | height_res_pb() | region_req_pb() | region_res_pb(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        pubkey_res_pb -> encode_msg_pubkey_res_pb(id(Msg, TrUserData), TrUserData);
        pubkey_req_pb -> encode_msg_pubkey_req_pb(id(Msg, TrUserData), TrUserData);
        sign_req_pb -> encode_msg_sign_req_pb(id(Msg, TrUserData), TrUserData);
        sign_res_pb -> encode_msg_sign_res_pb(id(Msg, TrUserData), TrUserData);
        ecdh_req_pb -> encode_msg_ecdh_req_pb(id(Msg, TrUserData), TrUserData);
        ecdh_res_pb -> encode_msg_ecdh_res_pb(id(Msg, TrUserData), TrUserData);
        config_req_pb -> encode_msg_config_req_pb(id(Msg, TrUserData), TrUserData);
        config_res_pb -> encode_msg_config_res_pb(id(Msg, TrUserData), TrUserData);
        config_value_pb -> encode_msg_config_value_pb(id(Msg, TrUserData), TrUserData);
        keyed_uri_pb -> encode_msg_keyed_uri_pb(id(Msg, TrUserData), TrUserData);
        height_req_pb -> encode_msg_height_req_pb(id(Msg, TrUserData), TrUserData);
        height_res_pb -> encode_msg_height_res_pb(id(Msg, TrUserData), TrUserData);
        region_req_pb -> encode_msg_region_req_pb(id(Msg, TrUserData), TrUserData);
        region_res_pb -> encode_msg_region_res_pb(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_pubkey_res_pb(Msg, TrUserData) -> encode_msg_pubkey_res_pb(Msg, <<>>, TrUserData).


encode_msg_pubkey_res_pb(#{} = M, Bin, TrUserData) ->
    case M of
        #{address := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_pubkey_req_pb(_Msg, _TrUserData) -> <<>>.

encode_msg_sign_req_pb(Msg, TrUserData) -> encode_msg_sign_req_pb(Msg, <<>>, TrUserData).


encode_msg_sign_req_pb(#{} = M, Bin, TrUserData) ->
    case M of
        #{data := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_sign_res_pb(Msg, TrUserData) -> encode_msg_sign_res_pb(Msg, <<>>, TrUserData).


encode_msg_sign_res_pb(#{} = M, Bin, TrUserData) ->
    case M of
        #{signature := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_ecdh_req_pb(Msg, TrUserData) -> encode_msg_ecdh_req_pb(Msg, <<>>, TrUserData).


encode_msg_ecdh_req_pb(#{} = M, Bin, TrUserData) ->
    case M of
        #{address := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_ecdh_res_pb(Msg, TrUserData) -> encode_msg_ecdh_res_pb(Msg, <<>>, TrUserData).


encode_msg_ecdh_res_pb(#{} = M, Bin, TrUserData) ->
    case M of
        #{secret := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case iolist_size(TrF1) of
                    0 -> Bin;
                    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_config_req_pb(Msg, TrUserData) -> encode_msg_config_req_pb(Msg, <<>>, TrUserData).


encode_msg_config_req_pb(#{} = M, Bin, TrUserData) ->
    case M of
        #{keys := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_config_req_pb_keys(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_config_res_pb(Msg, TrUserData) -> encode_msg_config_res_pb(Msg, <<>>, TrUserData).


encode_msg_config_res_pb(#{} = M, Bin, TrUserData) ->
    case M of
        #{values := F1} ->
            TrF1 = id(F1, TrUserData),
            if TrF1 == [] -> Bin;
               true -> e_field_config_res_pb_values(TrF1, Bin, TrUserData)
            end;
        _ -> Bin
    end.

encode_msg_config_value_pb(Msg, TrUserData) -> encode_msg_config_value_pb(Msg, <<>>, TrUserData).


encode_msg_config_value_pb(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{name := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{type := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     case is_empty_string(TrF2) of
                         true -> B1;
                         false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{value := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                case iolist_size(TrF3) of
                    0 -> B2;
                    _ -> e_type_bytes(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_keyed_uri_pb(Msg, TrUserData) -> encode_msg_keyed_uri_pb(Msg, <<>>, TrUserData).


encode_msg_keyed_uri_pb(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{address := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case iolist_size(TrF1) of
                         0 -> Bin;
                         _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{uri := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                case is_empty_string(TrF2) of
                    true -> B1;
                    false -> e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_height_req_pb(_Msg, _TrUserData) -> <<>>.

encode_msg_height_res_pb(Msg, TrUserData) -> encode_msg_height_res_pb(Msg, <<>>, TrUserData).


encode_msg_height_res_pb(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{height := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{block_age := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    case M of
        #{gateway := F3} ->
            begin
                TrF3 = id(F3, TrUserData),
                if TrF3 =:= undefined -> B2;
                   true -> e_mfield_height_res_pb_gateway(TrF3, <<B2/binary, 26>>, TrUserData)
                end
            end;
        _ -> B2
    end.

encode_msg_region_req_pb(_Msg, _TrUserData) -> <<>>.

encode_msg_region_res_pb(Msg, TrUserData) -> encode_msg_region_res_pb(Msg, <<>>, TrUserData).


encode_msg_region_res_pb(#{} = M, Bin, TrUserData) ->
    case M of
        #{region := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

e_field_config_req_pb_keys([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_config_req_pb_keys(Rest, Bin3, TrUserData);
e_field_config_req_pb_keys([], Bin, _TrUserData) -> Bin.

e_mfield_config_res_pb_values(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_config_value_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_config_res_pb_values([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_config_res_pb_values(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_config_res_pb_values(Rest, Bin3, TrUserData);
e_field_config_res_pb_values([], Bin, _TrUserData) -> Bin.

e_mfield_height_res_pb_gateway(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_keyed_uri_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(pubkey_res_pb, Bin, TrUserData) -> id(decode_msg_pubkey_res_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(pubkey_req_pb, Bin, TrUserData) -> id(decode_msg_pubkey_req_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(sign_req_pb, Bin, TrUserData) -> id(decode_msg_sign_req_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(sign_res_pb, Bin, TrUserData) -> id(decode_msg_sign_res_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(ecdh_req_pb, Bin, TrUserData) -> id(decode_msg_ecdh_req_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(ecdh_res_pb, Bin, TrUserData) -> id(decode_msg_ecdh_res_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(config_req_pb, Bin, TrUserData) -> id(decode_msg_config_req_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(config_res_pb, Bin, TrUserData) -> id(decode_msg_config_res_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(config_value_pb, Bin, TrUserData) -> id(decode_msg_config_value_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(keyed_uri_pb, Bin, TrUserData) -> id(decode_msg_keyed_uri_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(height_req_pb, Bin, TrUserData) -> id(decode_msg_height_req_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(height_res_pb, Bin, TrUserData) -> id(decode_msg_height_res_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(region_req_pb, Bin, TrUserData) -> id(decode_msg_region_req_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(region_res_pb, Bin, TrUserData) -> id(decode_msg_region_res_pb(Bin, TrUserData), TrUserData).



decode_msg_pubkey_res_pb(Bin, TrUserData) -> dfp_read_field_def_pubkey_res_pb(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_pubkey_res_pb(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_pubkey_res_pb_address(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_pubkey_res_pb(<<>>, 0, 0, F@_1, _) -> #{address => F@_1};
dfp_read_field_def_pubkey_res_pb(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_pubkey_res_pb(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_pubkey_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_pubkey_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_pubkey_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_pubkey_res_pb_address(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_pubkey_res_pb(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_pubkey_res_pb(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_pubkey_res_pb(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_pubkey_res_pb(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_pubkey_res_pb(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_pubkey_res_pb(<<>>, 0, 0, F@_1, _) -> #{address => F@_1}.

d_field_pubkey_res_pb_address(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_pubkey_res_pb_address(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_pubkey_res_pb_address(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_pubkey_res_pb(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_pubkey_res_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_pubkey_res_pb(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_pubkey_res_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pubkey_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_pubkey_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_pubkey_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_pubkey_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pubkey_res_pb(Rest2, 0, 0, F@_1, TrUserData).

skip_group_pubkey_res_pb(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_pubkey_res_pb(Rest, 0, Z2, F@_1, TrUserData).

skip_32_pubkey_res_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pubkey_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_pubkey_res_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_pubkey_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_pubkey_req_pb(Bin, TrUserData) -> dfp_read_field_def_pubkey_req_pb(Bin, 0, 0, TrUserData).

dfp_read_field_def_pubkey_req_pb(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_pubkey_req_pb(Other, Z1, Z2, TrUserData) -> dg_read_field_def_pubkey_req_pb(Other, Z1, Z2, TrUserData).

dg_read_field_def_pubkey_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_pubkey_req_pb(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_pubkey_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_pubkey_req_pb(Rest, 0, 0, TrUserData);
        1 -> skip_64_pubkey_req_pb(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_pubkey_req_pb(Rest, 0, 0, TrUserData);
        3 -> skip_group_pubkey_req_pb(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_pubkey_req_pb(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_pubkey_req_pb(<<>>, 0, 0, _) -> #{}.

skip_varint_pubkey_req_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_pubkey_req_pb(Rest, Z1, Z2, TrUserData);
skip_varint_pubkey_req_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_pubkey_req_pb(Rest, Z1, Z2, TrUserData).

skip_length_delimited_pubkey_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_pubkey_req_pb(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_pubkey_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_pubkey_req_pb(Rest2, 0, 0, TrUserData).

skip_group_pubkey_req_pb(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_pubkey_req_pb(Rest, 0, Z2, TrUserData).

skip_32_pubkey_req_pb(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_pubkey_req_pb(Rest, Z1, Z2, TrUserData).

skip_64_pubkey_req_pb(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_pubkey_req_pb(Rest, Z1, Z2, TrUserData).

decode_msg_sign_req_pb(Bin, TrUserData) -> dfp_read_field_def_sign_req_pb(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_sign_req_pb(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_sign_req_pb_data(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_sign_req_pb(<<>>, 0, 0, F@_1, _) -> #{data => F@_1};
dfp_read_field_def_sign_req_pb(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_sign_req_pb(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_sign_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_sign_req_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_sign_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_sign_req_pb_data(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_sign_req_pb(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_sign_req_pb(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_sign_req_pb(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_sign_req_pb(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_sign_req_pb(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_sign_req_pb(<<>>, 0, 0, F@_1, _) -> #{data => F@_1}.

d_field_sign_req_pb_data(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_sign_req_pb_data(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_sign_req_pb_data(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_sign_req_pb(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_sign_req_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_sign_req_pb(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sign_req_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_sign_req_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_sign_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_sign_req_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sign_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sign_req_pb(Rest2, 0, 0, F@_1, TrUserData).

skip_group_sign_req_pb(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sign_req_pb(Rest, 0, Z2, F@_1, TrUserData).

skip_32_sign_req_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_sign_req_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_sign_req_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_sign_req_pb(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_sign_res_pb(Bin, TrUserData) -> dfp_read_field_def_sign_res_pb(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_sign_res_pb(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_sign_res_pb_signature(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_sign_res_pb(<<>>, 0, 0, F@_1, _) -> #{signature => F@_1};
dfp_read_field_def_sign_res_pb(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_sign_res_pb(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_sign_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_sign_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_sign_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_sign_res_pb_signature(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_sign_res_pb(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_sign_res_pb(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_sign_res_pb(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_sign_res_pb(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_sign_res_pb(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_sign_res_pb(<<>>, 0, 0, F@_1, _) -> #{signature => F@_1}.

d_field_sign_res_pb_signature(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_sign_res_pb_signature(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_sign_res_pb_signature(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_sign_res_pb(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_sign_res_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_sign_res_pb(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_sign_res_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_sign_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_sign_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_sign_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_sign_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_sign_res_pb(Rest2, 0, 0, F@_1, TrUserData).

skip_group_sign_res_pb(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_sign_res_pb(Rest, 0, Z2, F@_1, TrUserData).

skip_32_sign_res_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_sign_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_sign_res_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_sign_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ecdh_req_pb(Bin, TrUserData) -> dfp_read_field_def_ecdh_req_pb(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_ecdh_req_pb(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ecdh_req_pb_address(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ecdh_req_pb(<<>>, 0, 0, F@_1, _) -> #{address => F@_1};
dfp_read_field_def_ecdh_req_pb(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ecdh_req_pb(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ecdh_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ecdh_req_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ecdh_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ecdh_req_pb_address(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ecdh_req_pb(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ecdh_req_pb(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ecdh_req_pb(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ecdh_req_pb(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ecdh_req_pb(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ecdh_req_pb(<<>>, 0, 0, F@_1, _) -> #{address => F@_1}.

d_field_ecdh_req_pb_address(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ecdh_req_pb_address(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ecdh_req_pb_address(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_ecdh_req_pb(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_ecdh_req_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ecdh_req_pb(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ecdh_req_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ecdh_req_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ecdh_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ecdh_req_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ecdh_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ecdh_req_pb(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ecdh_req_pb(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ecdh_req_pb(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ecdh_req_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ecdh_req_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ecdh_req_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ecdh_req_pb(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_ecdh_res_pb(Bin, TrUserData) -> dfp_read_field_def_ecdh_res_pb(Bin, 0, 0, id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_ecdh_res_pb(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_ecdh_res_pb_secret(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_ecdh_res_pb(<<>>, 0, 0, F@_1, _) -> #{secret => F@_1};
dfp_read_field_def_ecdh_res_pb(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_ecdh_res_pb(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_ecdh_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ecdh_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ecdh_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_ecdh_res_pb_secret(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ecdh_res_pb(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_ecdh_res_pb(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_ecdh_res_pb(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_ecdh_res_pb(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_ecdh_res_pb(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ecdh_res_pb(<<>>, 0, 0, F@_1, _) -> #{secret => F@_1}.

d_field_ecdh_res_pb_secret(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_ecdh_res_pb_secret(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_ecdh_res_pb_secret(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_ecdh_res_pb(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_ecdh_res_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_ecdh_res_pb(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_ecdh_res_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ecdh_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_ecdh_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ecdh_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ecdh_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ecdh_res_pb(Rest2, 0, 0, F@_1, TrUserData).

skip_group_ecdh_res_pb(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ecdh_res_pb(Rest, 0, Z2, F@_1, TrUserData).

skip_32_ecdh_res_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ecdh_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_ecdh_res_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_ecdh_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_config_req_pb(Bin, TrUserData) -> dfp_read_field_def_config_req_pb(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_config_req_pb(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_config_req_pb_keys(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_config_req_pb(<<>>, 0, 0, R1, TrUserData) -> #{keys => lists_reverse(R1, TrUserData)};
dfp_read_field_def_config_req_pb(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_config_req_pb(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_config_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_config_req_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_config_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_config_req_pb_keys(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_config_req_pb(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_config_req_pb(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_config_req_pb(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_config_req_pb(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_config_req_pb(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_config_req_pb(<<>>, 0, 0, R1, TrUserData) -> #{keys => lists_reverse(R1, TrUserData)}.

d_field_config_req_pb_keys(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_config_req_pb_keys(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_config_req_pb_keys(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_config_req_pb(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_config_req_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_config_req_pb(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_config_req_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_config_req_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_config_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_config_req_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_config_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_config_req_pb(Rest2, 0, 0, F@_1, TrUserData).

skip_group_config_req_pb(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_config_req_pb(Rest, 0, Z2, F@_1, TrUserData).

skip_32_config_req_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_config_req_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_config_req_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_config_req_pb(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_config_res_pb(Bin, TrUserData) -> dfp_read_field_def_config_res_pb(Bin, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_config_res_pb(<<10, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_config_res_pb_values(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_config_res_pb(<<>>, 0, 0, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{values => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_config_res_pb(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_config_res_pb(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_config_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_config_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_config_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_config_res_pb_values(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_config_res_pb(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_config_res_pb(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_config_res_pb(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_config_res_pb(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_config_res_pb(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_config_res_pb(<<>>, 0, 0, R1, TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{values => lists_reverse(R1, TrUserData)}
    end.

d_field_config_res_pb_values(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_config_res_pb_values(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_config_res_pb_values(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_config_value_pb(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_config_res_pb(RestF, 0, 0, cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_config_res_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_config_res_pb(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_config_res_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_config_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_config_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_config_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_config_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_config_res_pb(Rest2, 0, 0, F@_1, TrUserData).

skip_group_config_res_pb(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_config_res_pb(Rest, 0, Z2, F@_1, TrUserData).

skip_32_config_res_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_config_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_config_res_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_config_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_config_value_pb(Bin, TrUserData) -> dfp_read_field_def_config_value_pb(Bin, 0, 0, id([], TrUserData), id([], TrUserData), id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_config_value_pb(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_config_value_pb_name(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_config_value_pb(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_config_value_pb_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_config_value_pb(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_config_value_pb_value(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_config_value_pb(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{name => F@_1, type => F@_2, value => F@_3};
dfp_read_field_def_config_value_pb(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_config_value_pb(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_config_value_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_config_value_pb(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_config_value_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_config_value_pb_name(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_config_value_pb_type(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_config_value_pb_value(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_config_value_pb(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_config_value_pb(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_config_value_pb(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_config_value_pb(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_config_value_pb(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_config_value_pb(<<>>, 0, 0, F@_1, F@_2, F@_3, _) -> #{name => F@_1, type => F@_2, value => F@_3}.

d_field_config_value_pb_name(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_config_value_pb_name(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_config_value_pb_name(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_config_value_pb(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_config_value_pb_type(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_config_value_pb_type(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_config_value_pb_type(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_config_value_pb(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_config_value_pb_value(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_config_value_pb_value(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_config_value_pb_value(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_config_value_pb(RestF, 0, 0, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_config_value_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_config_value_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_config_value_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_config_value_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_config_value_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_config_value_pb(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_config_value_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_config_value_pb(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_config_value_pb(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_config_value_pb(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_config_value_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_config_value_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_config_value_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_config_value_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_keyed_uri_pb(Bin, TrUserData) -> dfp_read_field_def_keyed_uri_pb(Bin, 0, 0, id(<<>>, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_keyed_uri_pb(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_keyed_uri_pb_address(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_keyed_uri_pb(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_keyed_uri_pb_uri(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_keyed_uri_pb(<<>>, 0, 0, F@_1, F@_2, _) -> #{address => F@_1, uri => F@_2};
dfp_read_field_def_keyed_uri_pb(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_keyed_uri_pb(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_keyed_uri_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_keyed_uri_pb(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_keyed_uri_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_keyed_uri_pb_address(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_keyed_uri_pb_uri(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_keyed_uri_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_keyed_uri_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_keyed_uri_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_keyed_uri_pb(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_keyed_uri_pb(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_keyed_uri_pb(<<>>, 0, 0, F@_1, F@_2, _) -> #{address => F@_1, uri => F@_2}.

d_field_keyed_uri_pb_address(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_keyed_uri_pb_address(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_keyed_uri_pb_address(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_keyed_uri_pb(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_keyed_uri_pb_uri(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_keyed_uri_pb_uri(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_keyed_uri_pb_uri(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_keyed_uri_pb(RestF, 0, 0, F@_1, NewFValue, TrUserData).

skip_varint_keyed_uri_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_keyed_uri_pb(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_keyed_uri_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_keyed_uri_pb(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_keyed_uri_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_keyed_uri_pb(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_keyed_uri_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_keyed_uri_pb(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_keyed_uri_pb(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_keyed_uri_pb(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_keyed_uri_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_keyed_uri_pb(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_keyed_uri_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_keyed_uri_pb(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_height_req_pb(Bin, TrUserData) -> dfp_read_field_def_height_req_pb(Bin, 0, 0, TrUserData).

dfp_read_field_def_height_req_pb(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_height_req_pb(Other, Z1, Z2, TrUserData) -> dg_read_field_def_height_req_pb(Other, Z1, Z2, TrUserData).

dg_read_field_def_height_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_height_req_pb(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_height_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_height_req_pb(Rest, 0, 0, TrUserData);
        1 -> skip_64_height_req_pb(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_height_req_pb(Rest, 0, 0, TrUserData);
        3 -> skip_group_height_req_pb(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_height_req_pb(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_height_req_pb(<<>>, 0, 0, _) -> #{}.

skip_varint_height_req_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_height_req_pb(Rest, Z1, Z2, TrUserData);
skip_varint_height_req_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_height_req_pb(Rest, Z1, Z2, TrUserData).

skip_length_delimited_height_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_height_req_pb(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_height_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_height_req_pb(Rest2, 0, 0, TrUserData).

skip_group_height_req_pb(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_height_req_pb(Rest, 0, Z2, TrUserData).

skip_32_height_req_pb(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_height_req_pb(Rest, Z1, Z2, TrUserData).

skip_64_height_req_pb(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_height_req_pb(Rest, Z1, Z2, TrUserData).

decode_msg_height_res_pb(Bin, TrUserData) -> dfp_read_field_def_height_res_pb(Bin, 0, 0, id(0, TrUserData), id(0, TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_height_res_pb(<<8, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_height_res_pb_height(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_height_res_pb(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_height_res_pb_block_age(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_height_res_pb(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> d_field_height_res_pb_gateway(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_height_res_pb(<<>>, 0, 0, F@_1, F@_2, F@_3, _) ->
    S1 = #{height => F@_1, block_age => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{gateway => F@_3}
    end;
dfp_read_field_def_height_res_pb(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_height_res_pb(Other, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_height_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_height_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_height_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_height_res_pb_height(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        16 -> d_field_height_res_pb_block_age(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_height_res_pb_gateway(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_height_res_pb(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_height_res_pb(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_height_res_pb(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_height_res_pb(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_height_res_pb(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_height_res_pb(<<>>, 0, 0, F@_1, F@_2, F@_3, _) ->
    S1 = #{height => F@_1, block_age => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{gateway => F@_3}
    end.

d_field_height_res_pb_height(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_height_res_pb_height(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_height_res_pb_height(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_height_res_pb(RestF, 0, 0, NewFValue, F@_2, F@_3, TrUserData).

d_field_height_res_pb_block_age(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_height_res_pb_block_age(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_height_res_pb_block_age(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_height_res_pb(RestF, 0, 0, F@_1, NewFValue, F@_3, TrUserData).

d_field_height_res_pb_gateway(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_height_res_pb_gateway(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_height_res_pb_gateway(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_keyed_uri_pb(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_height_res_pb(RestF,
                                     0,
                                     0,
                                     F@_1,
                                     F@_2,
                                     if Prev == '$undef' -> NewFValue;
                                        true -> merge_msg_keyed_uri_pb(Prev, NewFValue, TrUserData)
                                     end,
                                     TrUserData).

skip_varint_height_res_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_height_res_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData);
skip_varint_height_res_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_height_res_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_height_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_height_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_height_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_height_res_pb(Rest2, 0, 0, F@_1, F@_2, F@_3, TrUserData).

skip_group_height_res_pb(Bin, FNum, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_height_res_pb(Rest, 0, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_32_height_res_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_height_res_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

skip_64_height_res_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_height_res_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3, TrUserData).

decode_msg_region_req_pb(Bin, TrUserData) -> dfp_read_field_def_region_req_pb(Bin, 0, 0, TrUserData).

dfp_read_field_def_region_req_pb(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_region_req_pb(Other, Z1, Z2, TrUserData) -> dg_read_field_def_region_req_pb(Other, Z1, Z2, TrUserData).

dg_read_field_def_region_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 32 - 7 -> dg_read_field_def_region_req_pb(Rest, N + 7, X bsl N + Acc, TrUserData);
dg_read_field_def_region_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_region_req_pb(Rest, 0, 0, TrUserData);
        1 -> skip_64_region_req_pb(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_region_req_pb(Rest, 0, 0, TrUserData);
        3 -> skip_group_region_req_pb(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_region_req_pb(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_region_req_pb(<<>>, 0, 0, _) -> #{}.

skip_varint_region_req_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> skip_varint_region_req_pb(Rest, Z1, Z2, TrUserData);
skip_varint_region_req_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_region_req_pb(Rest, Z1, Z2, TrUserData).

skip_length_delimited_region_req_pb(<<1:1, X:7, Rest/binary>>, N, Acc, TrUserData) when N < 57 -> skip_length_delimited_region_req_pb(Rest, N + 7, X bsl N + Acc, TrUserData);
skip_length_delimited_region_req_pb(<<0:1, X:7, Rest/binary>>, N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_region_req_pb(Rest2, 0, 0, TrUserData).

skip_group_region_req_pb(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_region_req_pb(Rest, 0, Z2, TrUserData).

skip_32_region_req_pb(<<_:32, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_region_req_pb(Rest, Z1, Z2, TrUserData).

skip_64_region_req_pb(<<_:64, Rest/binary>>, Z1, Z2, TrUserData) -> dfp_read_field_def_region_req_pb(Rest, Z1, Z2, TrUserData).

decode_msg_region_res_pb(Bin, TrUserData) -> dfp_read_field_def_region_res_pb(Bin, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_region_res_pb(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_region_res_pb_region(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_region_res_pb(<<>>, 0, 0, F@_1, _) -> #{region => F@_1};
dfp_read_field_def_region_res_pb(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_region_res_pb(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_region_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_region_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_region_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_region_res_pb_region(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_region_res_pb(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_region_res_pb(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_region_res_pb(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_region_res_pb(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_region_res_pb(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_region_res_pb(<<>>, 0, 0, F@_1, _) -> #{region => F@_1}.

d_field_region_res_pb_region(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_region_res_pb_region(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_region_res_pb_region(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end, Rest},
    dfp_read_field_def_region_res_pb(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_region_res_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_region_res_pb(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_region_res_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_region_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_region_res_pb(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_region_res_pb(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_region_res_pb(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_region_res_pb(Rest2, 0, 0, F@_1, TrUserData).

skip_group_region_res_pb(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_region_res_pb(Rest, 0, Z2, F@_1, TrUserData).

skip_32_region_res_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_region_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_region_res_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_region_res_pb(Rest, Z1, Z2, F@_1, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        pubkey_res_pb -> merge_msg_pubkey_res_pb(Prev, New, TrUserData);
        pubkey_req_pb -> merge_msg_pubkey_req_pb(Prev, New, TrUserData);
        sign_req_pb -> merge_msg_sign_req_pb(Prev, New, TrUserData);
        sign_res_pb -> merge_msg_sign_res_pb(Prev, New, TrUserData);
        ecdh_req_pb -> merge_msg_ecdh_req_pb(Prev, New, TrUserData);
        ecdh_res_pb -> merge_msg_ecdh_res_pb(Prev, New, TrUserData);
        config_req_pb -> merge_msg_config_req_pb(Prev, New, TrUserData);
        config_res_pb -> merge_msg_config_res_pb(Prev, New, TrUserData);
        config_value_pb -> merge_msg_config_value_pb(Prev, New, TrUserData);
        keyed_uri_pb -> merge_msg_keyed_uri_pb(Prev, New, TrUserData);
        height_req_pb -> merge_msg_height_req_pb(Prev, New, TrUserData);
        height_res_pb -> merge_msg_height_res_pb(Prev, New, TrUserData);
        region_req_pb -> merge_msg_region_req_pb(Prev, New, TrUserData);
        region_res_pb -> merge_msg_region_res_pb(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_pubkey_res_pb/3}).
merge_msg_pubkey_res_pb(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{address := NFaddress}} -> S1#{address => NFaddress};
        {#{address := PFaddress}, _} -> S1#{address => PFaddress};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_pubkey_req_pb/3}).
merge_msg_pubkey_req_pb(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_sign_req_pb/3}).
merge_msg_sign_req_pb(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{data := NFdata}} -> S1#{data => NFdata};
        {#{data := PFdata}, _} -> S1#{data => PFdata};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_sign_res_pb/3}).
merge_msg_sign_res_pb(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{signature := NFsignature}} -> S1#{signature => NFsignature};
        {#{signature := PFsignature}, _} -> S1#{signature => PFsignature};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ecdh_req_pb/3}).
merge_msg_ecdh_req_pb(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{address := NFaddress}} -> S1#{address => NFaddress};
        {#{address := PFaddress}, _} -> S1#{address => PFaddress};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ecdh_res_pb/3}).
merge_msg_ecdh_res_pb(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{secret := NFsecret}} -> S1#{secret => NFsecret};
        {#{secret := PFsecret}, _} -> S1#{secret => PFsecret};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_config_req_pb/3}).
merge_msg_config_req_pb(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{keys := PFkeys}, #{keys := NFkeys}} -> S1#{keys => 'erlang_++'(PFkeys, NFkeys, TrUserData)};
        {_, #{keys := NFkeys}} -> S1#{keys => NFkeys};
        {#{keys := PFkeys}, _} -> S1#{keys => PFkeys};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_config_res_pb/3}).
merge_msg_config_res_pb(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{values := PFvalues}, #{values := NFvalues}} -> S1#{values => 'erlang_++'(PFvalues, NFvalues, TrUserData)};
        {_, #{values := NFvalues}} -> S1#{values => NFvalues};
        {#{values := PFvalues}, _} -> S1#{values => PFvalues};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_config_value_pb/3}).
merge_msg_config_value_pb(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{name := NFname}} -> S1#{name => NFname};
             {#{name := PFname}, _} -> S1#{name => PFname};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{type := NFtype}} -> S2#{type => NFtype};
             {#{type := PFtype}, _} -> S2#{type => PFtype};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {_, #{value := NFvalue}} -> S3#{value => NFvalue};
        {#{value := PFvalue}, _} -> S3#{value => PFvalue};
        _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_keyed_uri_pb/3}).
merge_msg_keyed_uri_pb(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{address := NFaddress}} -> S1#{address => NFaddress};
             {#{address := PFaddress}, _} -> S1#{address => PFaddress};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{uri := NFuri}} -> S2#{uri => NFuri};
        {#{uri := PFuri}, _} -> S2#{uri => PFuri};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_height_req_pb/3}).
merge_msg_height_req_pb(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_height_res_pb/3}).
merge_msg_height_res_pb(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{height := NFheight}} -> S1#{height => NFheight};
             {#{height := PFheight}, _} -> S1#{height => PFheight};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{block_age := NFblock_age}} -> S2#{block_age => NFblock_age};
             {#{block_age := PFblock_age}, _} -> S2#{block_age => PFblock_age};
             _ -> S2
         end,
    case {PMsg, NMsg} of
        {#{gateway := PFgateway}, #{gateway := NFgateway}} -> S3#{gateway => merge_msg_keyed_uri_pb(PFgateway, NFgateway, TrUserData)};
        {_, #{gateway := NFgateway}} -> S3#{gateway => NFgateway};
        {#{gateway := PFgateway}, _} -> S3#{gateway => PFgateway};
        {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_region_req_pb/3}).
merge_msg_region_req_pb(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_region_res_pb/3}).
merge_msg_region_res_pb(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{region := NFregion}} -> S1#{region => NFregion};
        {#{region := PFregion}, _} -> S1#{region => PFregion};
        _ -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        pubkey_res_pb -> v_msg_pubkey_res_pb(Msg, [MsgName], TrUserData);
        pubkey_req_pb -> v_msg_pubkey_req_pb(Msg, [MsgName], TrUserData);
        sign_req_pb -> v_msg_sign_req_pb(Msg, [MsgName], TrUserData);
        sign_res_pb -> v_msg_sign_res_pb(Msg, [MsgName], TrUserData);
        ecdh_req_pb -> v_msg_ecdh_req_pb(Msg, [MsgName], TrUserData);
        ecdh_res_pb -> v_msg_ecdh_res_pb(Msg, [MsgName], TrUserData);
        config_req_pb -> v_msg_config_req_pb(Msg, [MsgName], TrUserData);
        config_res_pb -> v_msg_config_res_pb(Msg, [MsgName], TrUserData);
        config_value_pb -> v_msg_config_value_pb(Msg, [MsgName], TrUserData);
        keyed_uri_pb -> v_msg_keyed_uri_pb(Msg, [MsgName], TrUserData);
        height_req_pb -> v_msg_height_req_pb(Msg, [MsgName], TrUserData);
        height_res_pb -> v_msg_height_res_pb(Msg, [MsgName], TrUserData);
        region_req_pb -> v_msg_region_req_pb(Msg, [MsgName], TrUserData);
        region_res_pb -> v_msg_region_res_pb(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_pubkey_res_pb/3}).
-dialyzer({nowarn_function,v_msg_pubkey_res_pb/3}).
v_msg_pubkey_res_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{address := F1} -> v_type_bytes(F1, [address | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (address) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_pubkey_res_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), pubkey_res_pb}, M, Path);
v_msg_pubkey_res_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, pubkey_res_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_pubkey_req_pb/3}).
-dialyzer({nowarn_function,v_msg_pubkey_req_pb/3}).
v_msg_pubkey_req_pb(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_pubkey_req_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), pubkey_req_pb}, M, Path);
v_msg_pubkey_req_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, pubkey_req_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_sign_req_pb/3}).
-dialyzer({nowarn_function,v_msg_sign_req_pb/3}).
v_msg_sign_req_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{data := F1} -> v_type_bytes(F1, [data | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (data) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_sign_req_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), sign_req_pb}, M, Path);
v_msg_sign_req_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, sign_req_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_sign_res_pb/3}).
-dialyzer({nowarn_function,v_msg_sign_res_pb/3}).
v_msg_sign_res_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{signature := F1} -> v_type_bytes(F1, [signature | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (signature) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_sign_res_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), sign_res_pb}, M, Path);
v_msg_sign_res_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, sign_res_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_ecdh_req_pb/3}).
-dialyzer({nowarn_function,v_msg_ecdh_req_pb/3}).
v_msg_ecdh_req_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{address := F1} -> v_type_bytes(F1, [address | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (address) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ecdh_req_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), ecdh_req_pb}, M, Path);
v_msg_ecdh_req_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, ecdh_req_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_ecdh_res_pb/3}).
-dialyzer({nowarn_function,v_msg_ecdh_res_pb/3}).
v_msg_ecdh_res_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{secret := F1} -> v_type_bytes(F1, [secret | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (secret) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ecdh_res_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), ecdh_res_pb}, M, Path);
v_msg_ecdh_res_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, ecdh_res_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_config_req_pb/3}).
-dialyzer({nowarn_function,v_msg_config_req_pb/3}).
v_msg_config_req_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{keys := F1} ->
            if is_list(F1) ->
                   _ = [v_type_string(Elem, [keys | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, string}, F1, [keys | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (keys) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_config_req_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), config_req_pb}, M, Path);
v_msg_config_req_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, config_req_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_config_res_pb/3}).
-dialyzer({nowarn_function,v_msg_config_res_pb/3}).
v_msg_config_res_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{values := F1} ->
            if is_list(F1) ->
                   _ = [v_msg_config_value_pb(Elem, [values | Path], TrUserData) || Elem <- F1],
                   ok;
               true -> mk_type_error({invalid_list_of, {msg, config_value_pb}}, F1, [values | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (values) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_config_res_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), config_res_pb}, M, Path);
v_msg_config_res_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, config_res_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_config_value_pb/3}).
-dialyzer({nowarn_function,v_msg_config_value_pb/3}).
v_msg_config_value_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{name := F1} -> v_type_string(F1, [name | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{type := F2} -> v_type_string(F2, [type | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{value := F3} -> v_type_bytes(F3, [value | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
                      (type) -> ok;
                      (value) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_config_value_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), config_value_pb}, M, Path);
v_msg_config_value_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, config_value_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_keyed_uri_pb/3}).
-dialyzer({nowarn_function,v_msg_keyed_uri_pb/3}).
v_msg_keyed_uri_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{address := F1} -> v_type_bytes(F1, [address | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{uri := F2} -> v_type_string(F2, [uri | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (address) -> ok;
                      (uri) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_keyed_uri_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), keyed_uri_pb}, M, Path);
v_msg_keyed_uri_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, keyed_uri_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_height_req_pb/3}).
-dialyzer({nowarn_function,v_msg_height_req_pb/3}).
v_msg_height_req_pb(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_height_req_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), height_req_pb}, M, Path);
v_msg_height_req_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, height_req_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_height_res_pb/3}).
-dialyzer({nowarn_function,v_msg_height_res_pb/3}).
v_msg_height_res_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{height := F1} -> v_type_uint64(F1, [height | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{block_age := F2} -> v_type_uint64(F2, [block_age | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{gateway := F3} -> v_msg_keyed_uri_pb(F3, [gateway | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (height) -> ok;
                      (block_age) -> ok;
                      (gateway) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_height_res_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), height_res_pb}, M, Path);
v_msg_height_res_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, height_res_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_region_req_pb/3}).
-dialyzer({nowarn_function,v_msg_region_req_pb/3}).
v_msg_region_req_pb(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_region_req_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), region_req_pb}, M, Path);
v_msg_region_req_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, region_req_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_region_res_pb/3}).
-dialyzer({nowarn_function,v_msg_region_res_pb/3}).
v_msg_region_res_pb(#{} = M, Path, TrUserData) ->
    case M of
        #{region := F1} -> v_type_int32(F1, [region | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (region) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_region_res_pb(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), region_res_pb}, M, Path);
v_msg_region_res_pb(X, Path, _TrUserData) -> mk_type_error({expected_msg, region_res_pb}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData) when -2147483648 =< N, N =< 2147483647 -> ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, int32, signed, 32}, N, Path);
v_type_int32(X, Path, _TrUserData) -> mk_type_error({bad_integer, int32, signed, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) -> ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) -> ok;
v_type_bytes(X, Path, _TrUserData) -> mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, pubkey_res_pb}, [#{name => address, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, pubkey_req_pb}, []},
     {{msg, sign_req_pb}, [#{name => data, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, sign_res_pb}, [#{name => signature, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, ecdh_req_pb}, [#{name => address, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, ecdh_res_pb}, [#{name => secret, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}]},
     {{msg, config_req_pb}, [#{name => keys, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}]},
     {{msg, config_res_pb}, [#{name => values, fnum => 1, rnum => 2, type => {msg, config_value_pb}, occurrence => repeated, opts => []}]},
     {{msg, config_value_pb},
      [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => type, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
       #{name => value, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []}]},
     {{msg, keyed_uri_pb}, [#{name => address, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => uri, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}]},
     {{msg, height_req_pb}, []},
     {{msg, height_res_pb},
      [#{name => height, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []},
       #{name => block_age, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
       #{name => gateway, fnum => 3, rnum => 4, type => {msg, keyed_uri_pb}, occurrence => optional, opts => []}]},
     {{msg, region_req_pb}, []},
     {{msg, region_res_pb}, [#{name => region, fnum => 1, rnum => 2, type => int32, occurrence => optional, opts => []}]}].


get_msg_names() -> [pubkey_res_pb, pubkey_req_pb, sign_req_pb, sign_res_pb, ecdh_req_pb, ecdh_res_pb, config_req_pb, config_res_pb, config_value_pb, keyed_uri_pb, height_req_pb, height_res_pb, region_req_pb, region_res_pb].


get_group_names() -> [].


get_msg_or_group_names() -> [pubkey_res_pb, pubkey_req_pb, sign_req_pb, sign_res_pb, ecdh_req_pb, ecdh_res_pb, config_req_pb, config_res_pb, config_value_pb, keyed_uri_pb, height_req_pb, height_res_pb, region_req_pb, region_res_pb].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def(pubkey_res_pb) -> [#{name => address, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def(pubkey_req_pb) -> [];
find_msg_def(sign_req_pb) -> [#{name => data, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def(sign_res_pb) -> [#{name => signature, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def(ecdh_req_pb) -> [#{name => address, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def(ecdh_res_pb) -> [#{name => secret, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}];
find_msg_def(config_req_pb) -> [#{name => keys, fnum => 1, rnum => 2, type => string, occurrence => repeated, opts => []}];
find_msg_def(config_res_pb) -> [#{name => values, fnum => 1, rnum => 2, type => {msg, config_value_pb}, occurrence => repeated, opts => []}];
find_msg_def(config_value_pb) ->
    [#{name => name, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => type, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []},
     #{name => value, fnum => 3, rnum => 4, type => bytes, occurrence => optional, opts => []}];
find_msg_def(keyed_uri_pb) -> [#{name => address, fnum => 1, rnum => 2, type => bytes, occurrence => optional, opts => []}, #{name => uri, fnum => 2, rnum => 3, type => string, occurrence => optional, opts => []}];
find_msg_def(height_req_pb) -> [];
find_msg_def(height_res_pb) ->
    [#{name => height, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []},
     #{name => block_age, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
     #{name => gateway, fnum => 3, rnum => 4, type => {msg, keyed_uri_pb}, occurrence => optional, opts => []}];
find_msg_def(region_req_pb) -> [];
find_msg_def(region_res_pb) -> [#{name => region, fnum => 1, rnum => 2, type => int32, occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['helium.local.api'].


get_service_def('helium.local.api') ->
    {{service, 'helium.local.api'},
     [#{name => pubkey, input => pubkey_req_pb, output => pubkey_res_pb, input_stream => false, output_stream => false, opts => []},
      #{name => sign, input => sign_req_pb, output => sign_res_pb, input_stream => false, output_stream => false, opts => []},
      #{name => ecdh, input => ecdh_req_pb, output => ecdh_res_pb, input_stream => false, output_stream => false, opts => []},
      #{name => config, input => config_req_pb, output => config_res_pb, input_stream => false, output_stream => false, opts => []},
      #{name => height, input => height_req_pb, output => height_res_pb, input_stream => false, output_stream => false, opts => []},
      #{name => region, input => region_req_pb, output => region_res_pb, input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('helium.local.api') -> [pubkey, sign, ecdh, config, height, region];
get_rpc_names(_) -> error.


find_rpc_def('helium.local.api', RpcName) -> 'find_rpc_def_helium.local.api'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_helium.local.api'(pubkey) -> #{name => pubkey, input => pubkey_req_pb, output => pubkey_res_pb, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_helium.local.api'(sign) -> #{name => sign, input => sign_req_pb, output => sign_res_pb, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_helium.local.api'(ecdh) -> #{name => ecdh, input => ecdh_req_pb, output => ecdh_res_pb, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_helium.local.api'(config) -> #{name => config, input => config_req_pb, output => config_res_pb, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_helium.local.api'(height) -> #{name => height, input => height_req_pb, output => height_res_pb, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_helium.local.api'(region) -> #{name => region, input => region_req_pb, output => region_res_pb, input_stream => false, output_stream => false, opts => []};
'find_rpc_def_helium.local.api'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"helium.local.api">>) -> 'helium.local.api';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('helium.local.api') -> <<"helium.local.api">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"helium.local.api">>, <<"pubkey">>) -> {'helium.local.api', pubkey};
fqbins_to_service_and_rpc_name(<<"helium.local.api">>, <<"sign">>) -> {'helium.local.api', sign};
fqbins_to_service_and_rpc_name(<<"helium.local.api">>, <<"ecdh">>) -> {'helium.local.api', ecdh};
fqbins_to_service_and_rpc_name(<<"helium.local.api">>, <<"config">>) -> {'helium.local.api', config};
fqbins_to_service_and_rpc_name(<<"helium.local.api">>, <<"height">>) -> {'helium.local.api', height};
fqbins_to_service_and_rpc_name(<<"helium.local.api">>, <<"region">>) -> {'helium.local.api', region};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('helium.local.api', pubkey) -> {<<"helium.local.api">>, <<"pubkey">>};
service_and_rpc_name_to_fqbins('helium.local.api', sign) -> {<<"helium.local.api">>, <<"sign">>};
service_and_rpc_name_to_fqbins('helium.local.api', ecdh) -> {<<"helium.local.api">>, <<"ecdh">>};
service_and_rpc_name_to_fqbins('helium.local.api', config) -> {<<"helium.local.api">>, <<"config">>};
service_and_rpc_name_to_fqbins('helium.local.api', height) -> {<<"helium.local.api">>, <<"height">>};
service_and_rpc_name_to_fqbins('helium.local.api', region) -> {<<"helium.local.api">>, <<"region">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"helium.local.pubkey_res">>) -> pubkey_res_pb;
fqbin_to_msg_name(<<"helium.local.pubkey_req">>) -> pubkey_req_pb;
fqbin_to_msg_name(<<"helium.local.sign_req">>) -> sign_req_pb;
fqbin_to_msg_name(<<"helium.local.sign_res">>) -> sign_res_pb;
fqbin_to_msg_name(<<"helium.local.ecdh_req">>) -> ecdh_req_pb;
fqbin_to_msg_name(<<"helium.local.ecdh_res">>) -> ecdh_res_pb;
fqbin_to_msg_name(<<"helium.local.config_req">>) -> config_req_pb;
fqbin_to_msg_name(<<"helium.local.config_res">>) -> config_res_pb;
fqbin_to_msg_name(<<"helium.local.config_value">>) -> config_value_pb;
fqbin_to_msg_name(<<"helium.local.keyed_uri">>) -> keyed_uri_pb;
fqbin_to_msg_name(<<"helium.local.height_req">>) -> height_req_pb;
fqbin_to_msg_name(<<"helium.local.height_res">>) -> height_res_pb;
fqbin_to_msg_name(<<"helium.local.region_req">>) -> region_req_pb;
fqbin_to_msg_name(<<"helium.local.region_res">>) -> region_res_pb;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(pubkey_res_pb) -> <<"helium.local.pubkey_res">>;
msg_name_to_fqbin(pubkey_req_pb) -> <<"helium.local.pubkey_req">>;
msg_name_to_fqbin(sign_req_pb) -> <<"helium.local.sign_req">>;
msg_name_to_fqbin(sign_res_pb) -> <<"helium.local.sign_res">>;
msg_name_to_fqbin(ecdh_req_pb) -> <<"helium.local.ecdh_req">>;
msg_name_to_fqbin(ecdh_res_pb) -> <<"helium.local.ecdh_res">>;
msg_name_to_fqbin(config_req_pb) -> <<"helium.local.config_req">>;
msg_name_to_fqbin(config_res_pb) -> <<"helium.local.config_res">>;
msg_name_to_fqbin(config_value_pb) -> <<"helium.local.config_value">>;
msg_name_to_fqbin(keyed_uri_pb) -> <<"helium.local.keyed_uri">>;
msg_name_to_fqbin(height_req_pb) -> <<"helium.local.height_req">>;
msg_name_to_fqbin(height_res_pb) -> <<"helium.local.height_res">>;
msg_name_to_fqbin(region_req_pb) -> <<"helium.local.region_req">>;
msg_name_to_fqbin(region_res_pb) -> <<"helium.local.region_res">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'helium.local'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "local.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["local.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["local"].


get_msg_containment("local") -> [config_req_pb, config_res_pb, config_value_pb, ecdh_req_pb, ecdh_res_pb, height_req_pb, height_res_pb, keyed_uri_pb, pubkey_req_pb, pubkey_res_pb, region_req_pb, region_res_pb, sign_req_pb, sign_res_pb];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("local") -> 'helium.local';
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("local") -> ['helium.local.api'];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("local") -> [{'helium.local.api', pubkey}, {'helium.local.api', sign}, {'helium.local.api', ecdh}, {'helium.local.api', config}, {'helium.local.api', height}, {'helium.local.api', region}];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("local") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"helium.local.sign_req">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.region_req">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.pubkey_req">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.height_req">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.ecdh_req">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.config_req">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.sign_res">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.region_res">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.pubkey_res">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.height_res">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.ecdh_res">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.config_res">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.config_value">>) -> "local";
get_proto_by_msg_name_as_fqbin(<<"helium.local.keyed_uri">>) -> "local";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"helium.local.api">>) -> "local";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"helium.local">>) -> ["local"];
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.13.0".

gpb_version_as_list() ->
    [4,13,0].
