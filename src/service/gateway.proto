syntax = "proto3";

package helium;

import "blockchain_state_channel_v1.proto";
import "blockchain_txn_state_channel_close_v1.proto";

enum CloseState {
  close_state_closable = 0;
  close_state_closing = 1;
  close_state_closed = 2;
  close_state_dispute = 3;
}

message gateway_resp_v1 {
  uint64 height = 1;
  bytes signature = 2;
  oneof msg {
    gateway_sc_is_valid_resp_v1 is_valid_resp = 3;
    gateway_sc_close_resp_v1 close_resp = 4;
    gateway_sc_follow_streamed_resp_v1 follow_streamed_resp = 5;
    gateway_routing_streamed_resp_v1 routing_streamed_resp = 6;
  }
}

/* state channels */

message gateway_sc_is_valid_req_v1 { blockchain_state_channel_v1 sc = 1; }
message gateway_sc_is_valid_resp_v1 {
  bytes sc_id = 1;
  bool valid = 2;
  bytes reason = 3;
}

message gateway_sc_close_req_v1 {
  blockchain_txn_state_channel_close_v1 close_txn = 1;
}
message gateway_sc_close_resp_v1 {
  bytes sc_id = 1;
  bytes response = 2;
}

message gateway_sc_follow_req_v1 {
  bytes sc_id = 1;
  bytes owner = 2;
}
message gateway_sc_follow_streamed_resp_v1 {
  bytes sc_id = 1;
  CloseState close_state = 2;
}

/* routing */

message routing {
  uint32 oui = 1;
  bytes owner = 2;
  repeated routing_address addresses = 3;
  repeated bytes filters = 4;
  repeated bytes subnets = 5;
}

message routing_address {
  bytes pub_key = 1;
  bytes uri = 2;
}

message gateway_routing_req_v1 { uint64 height = 1; }
message gateway_routing_streamed_resp_v1 { repeated routing routings = 1; }

/* Gateway Service */
service gateway {
  rpc is_valid(gateway_sc_is_valid_req_v1) returns (gateway_resp_v1);
  rpc close(gateway_sc_close_req_v1) returns (gateway_resp_v1);
  rpc follow(stream gateway_sc_follow_req_v1) returns (stream gateway_resp_v1);

  rpc routing(gateway_routing_req_v1) returns (stream gateway_resp_v1);
}