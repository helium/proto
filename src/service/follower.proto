syntax = "proto3";

package helium.follower;

import "blockchain_token_type_v1.proto";
import "blockchain_txn.proto";
import "gateway_staking_mode.proto";

message follower_txn_stream_req_v1 {
  uint64 height = 1;
  bytes txn_hash = 2;
  repeated string txn_types = 3;
}

message follower_txn_stream_resp_v1 {
  uint64 height = 1;
  bytes txn_hash = 2;
  blockchain_txn txn = 3;
  uint64 timestamp = 4;
}

/// Look up the owner of a given hotspot public key
message follower_gateway_req_v1 {
  /// The pubkey_bin address of the gateway to look up
  bytes address = 1;
}

/// Request a stream of all active gateways from the on-chain metadata
message follower_gateway_stream_req_v1 {}

message follower_gateway_resp_v1 {
  /// The height for at which the ownership was looked up
  uint64 height = 1;
  /// The asserted h3 (string) location of the gateway. Empty string if the
  // gateway is not found
  string location = 2;
  /// The pubkey_bin address of the requested gateway
  bytes address = 3;
  /// The pubkey_bin address of the current owner of the gateway. An empty bytes
  /// if the hotspot is not found
  bytes owner = 4;
  // the staking mode of the gateway
  gateway_staking_mode staking_mode = 5;
  // the transmit gain value of the gateway in dbi x 10 For exmaple 1 dbi = 10,
  // 15 dbi = 150
  int32 gain = 6;
}

/// Query the last reward block for the given subnetwork by token type
message follower_subnetwork_last_reward_height_req_v1 {
  /// The token type of the subnetwork to query
  blockchain_token_type_v1 token_type = 1;
}

message follower_subnetwork_last_reward_height_resp_v1 {
  /// The current height at the time of the request
  uint64 height = 1;
  /// The height of the reward block
  uint64 reward_height = 2;
}

service follower {
  rpc txn_stream(follower_txn_stream_req_v1)
      returns (stream follower_txn_stream_resp_v1);
  rpc find_gateway(follower_gateway_req_v1) returns (follower_gateway_resp_v1);
  rpc active_gateways(follower_gateway_stream_req_v1)
      returns (stream follower_gateway_resp_v1);
  rpc subnetwork_last_reward_height(
      follower_subnetwork_last_reward_height_req_v1)
      returns (follower_subnetwork_last_reward_height_resp_v1);
}
