syntax = "proto3";

package helium;

import "blockchain_txn.proto";

message follower_txn_stream_req_v1 {
  uint64 height = 1;
  bytes txn_hash = 2;
  repeated string txn_types = 3;
}

message follower_txn_stream_resp_v1 {
  uint64 height = 1;
  bytes txn_hash = 2;
  blockchain_txn txn = 3;
  uint64 timestamp = 4;
}

/// Look up the owner of a given hotspot public key
message follower_gateway_req_v1 {
  /// The pubkey_bin address of the gateway to look up
  bytes address = 1;
}

message follower_gateway_resp_v1 {
  /// The height for at which the ownership was looked up
  uint64 height = 1;
  /// The asserted h3 (string) location of the gateway. Empty string if the
  // gateway is not found
  string location = 2;
  /// The pubkey_bin address of the requested gateway
  bytes address = 3;
  /// The pubkey_bin address of the current owner of the gateway. An empty bytes
  /// if the hotspot is not found
  bytes owner = 4;
}

service follower {
  rpc txn_stream(follower_txn_stream_req_v1)
      returns (stream follower_txn_stream_resp_v1);
  rpc find_gateway(follower_gateway_req_v1) returns (follower_gateway_resp_v1);
}
