syntax = "proto3";
package helium;

message mapper_msg {
  oneof version {
    mapper_msg_v1 msg_v1 = 1;
  }
}

message mapper_msg_v1 {
  payload payload = 1;
  // the pubkey signs over the message above
  // which does not contain the pubkey itself
  bytes signature = 2;
  bytes pub_key = 3;

  // below is optional metadata which depending
  // on the message above, may or may not be populated.
  // it is included here because it cannot be signed

  // hotspots that received the mapper message if it
  // was received over lorawan
  repeated bytes hotspots = 4;
}

message payload {
  oneof message {
    mapper_gps gps = 1;
    mapper_scan scan = 2;
    mapper_attach attach = 3;
    mapper_beacon beacon = 4;
  }
}

message mapper_attach {
  oneof version { mapper_cbrs_attach_v1 attach_v1 = 1; }
}

message mapper_cbrs_attach_v1 {
  enum mapper_attach_result {
    none = 0;
    connect = 1;
    limited_service = 2;
    no_connection = 3;
    search = 4;
    no_network_service = 5;
  }
  message mapper_cbrs_attach_candidate {
    // Corresponds "scan_response_counter" in the scan_response_counter which we
    // selected attach candidates from
    uint32 from_scan = 2;
    // delay in seconds between locking to the cell and evaluating connectivity
    uint32 delay = 3;
    uint32 fcn = 4;
    // 28-bit (UMTS, LTE)
    uint32 cid = 5;
    // RSRQ in units of 0.1 dB
    int32 rsrp = 6;
    // RSRP in units of 0.1 dBm
    int32 rsrq = 7;
  }
  // This allows us to detect censorship efforts. It can roll over.
  uint32 attach_counter = 1;
  mapper_gps_v1 gps = 2;
  mapper_cbrs_attach_candidate candidate = 3;
  mapper_attach_result result = 4;
}

message mapper_gps {
  oneof version { mapper_gps_v1 gps_v1 = 1; }
}

message mapper_gps_v1 {
  // epoch UTC time in seconds
  uint64 timestamp = 1;
  // given in 0.00001 degrees
  int32 lat = 2;
  // given in 0.00001 degrees
  int32 lon = 3;
  // given in 0.01m
  uint32 hdop = 4;
  // given in 0.01m
  int32 altitude = 5;
  // number of satellites used for fix
  uint32 num_sats = 6;
  // given in 0.01m
  uint32 speed = 7;
}

message mapper_scan {
  oneof version { mapper_cell_scan_v1 scan_v1 = 1; }
}

message mapper_cell_scan_v1 {
  uint32 scan_counter = 1;
  mapper_gps_v1 gps = 2;
  repeated mapper_cell_scan_result results = 3;
}

message mapper_cell_scan_result {
  bool lte = 1;
  // 28-bit (UMTS, LTE) or 36-bit (5G NR)
  uint64 cid = 2;
  // PLMN = (MCC << 16) | MNC
  uint32 plmn = 3;
  // EARFCN or UARFCN
  uint32 fcn = 4;
  uint32 pci = 5;
  // RSRQ in units of 0.1 dB
  int32 rsrp = 6;
  // RSRP in units of 0.1 dBm
  int32 rsrq = 7;
  // bandwidth in MHz
  uint32 bandwidth = 8;
}


message mapper_beacon {
  oneof version { mapper_beacon_v1 beacon_v1 = 1; }
}

message mapper_beacon_v1 {
  mapper_gps_v1 gps = 1;
  bytes signature = 2;
}